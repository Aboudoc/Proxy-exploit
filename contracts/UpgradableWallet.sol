// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

// Wallet Hijack
// This wallet is upgradable. UpgradableWallet fowards all calls to WalletImplementation.
// Task: Drain all ETH from the wallet
contract UpgradableWallet {
    address public implementation;
    address public owner;

    constructor(address _implementation) {
        implementation = _implementation;
        owner = msg.sender;
    }

    fallback() external {
        (bool success, ) = implementation.delegatecall(msg.data);
        require(success, "failed");
    }
}

contract WalletImplementation {
    address public implementation;
    address payable public owner;

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function setImplementation(address _implementation) external {
        implementation = _implementation;
    }

    function withdraw() external onlyOwner {
        owner.transfer(address(this).balance);
    }
}
